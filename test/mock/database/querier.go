// Code generated by MockGen. DO NOT EDIT.
// Source: database/interface.go
//
// Generated by this command:
//
//	mockgen -source database/interface.go -destination test/mock/database/querier.go -package database
//

// Package database is a generated GoMock package.
package database

import (
	context "context"
	reflect "reflect"

	database "github.com/minoritea/chat/database"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateMessage mocks base method.
func (m *MockQuerier) CreateMessage(ctx context.Context, arg database.CreateMessageParams) (database.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", ctx, arg)
	ret0, _ := ret[0].(database.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockQuerierMockRecorder) CreateMessage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockQuerier)(nil).CreateMessage), ctx, arg)
}

// CreateSession mocks base method.
func (m *MockQuerier) CreateSession(ctx context.Context, arg database.CreateSessionParams) (database.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, arg)
	ret0, _ := ret[0].(database.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockQuerierMockRecorder) CreateSession(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockQuerier)(nil).CreateSession), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(ctx context.Context, arg database.CreateUserParams) (database.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(database.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), ctx, arg)
}

// GetUserByAccount mocks base method.
func (m *MockQuerier) GetUserByAccount(ctx context.Context, account string) (database.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByAccount", ctx, account)
	ret0, _ := ret[0].(database.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByAccount indicates an expected call of GetUserByAccount.
func (mr *MockQuerierMockRecorder) GetUserByAccount(ctx, account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByAccount", reflect.TypeOf((*MockQuerier)(nil).GetUserByAccount), ctx, account)
}

// GetUserBySessionID mocks base method.
func (m *MockQuerier) GetUserBySessionID(ctx context.Context, id string) (database.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBySessionID", ctx, id)
	ret0, _ := ret[0].(database.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBySessionID indicates an expected call of GetUserBySessionID.
func (mr *MockQuerierMockRecorder) GetUserBySessionID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBySessionID", reflect.TypeOf((*MockQuerier)(nil).GetUserBySessionID), ctx, id)
}

// ListMessagesAfterID mocks base method.
func (m *MockQuerier) ListMessagesAfterID(ctx context.Context, arg database.ListMessagesAfterIDParams) ([]database.ListMessagesAfterIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessagesAfterID", ctx, arg)
	ret0, _ := ret[0].([]database.ListMessagesAfterIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMessagesAfterID indicates an expected call of ListMessagesAfterID.
func (mr *MockQuerierMockRecorder) ListMessagesAfterID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessagesAfterID", reflect.TypeOf((*MockQuerier)(nil).ListMessagesAfterID), ctx, arg)
}

// ListMessagesBeforeID mocks base method.
func (m *MockQuerier) ListMessagesBeforeID(ctx context.Context, arg database.ListMessagesBeforeIDParams) ([]database.ListMessagesBeforeIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessagesBeforeID", ctx, arg)
	ret0, _ := ret[0].([]database.ListMessagesBeforeIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMessagesBeforeID indicates an expected call of ListMessagesBeforeID.
func (mr *MockQuerierMockRecorder) ListMessagesBeforeID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessagesBeforeID", reflect.TypeOf((*MockQuerier)(nil).ListMessagesBeforeID), ctx, arg)
}

// ListNewestMessages mocks base method.
func (m *MockQuerier) ListNewestMessages(ctx context.Context, limit int64) ([]database.ListNewestMessagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNewestMessages", ctx, limit)
	ret0, _ := ret[0].([]database.ListNewestMessagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNewestMessages indicates an expected call of ListNewestMessages.
func (mr *MockQuerierMockRecorder) ListNewestMessages(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNewestMessages", reflect.TypeOf((*MockQuerier)(nil).ListNewestMessages), ctx, limit)
}

// ListOldestMessages mocks base method.
func (m *MockQuerier) ListOldestMessages(ctx context.Context, limit int64) ([]database.ListOldestMessagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOldestMessages", ctx, limit)
	ret0, _ := ret[0].([]database.ListOldestMessagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOldestMessages indicates an expected call of ListOldestMessages.
func (mr *MockQuerierMockRecorder) ListOldestMessages(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOldestMessages", reflect.TypeOf((*MockQuerier)(nil).ListOldestMessages), ctx, limit)
}
