// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: queries.sql

package database

import (
	"context"
	"time"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (id, user_id, message, created_at) VALUES (?, ?, ?, ?)
RETURNING id, user_id, message, created_at
`

type CreateMessageParams struct {
	ID        string
	UserID    string
	Message   string
	CreatedAt time.Time
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.ID,
		arg.UserID,
		arg.Message,
		arg.CreatedAt,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, user_id) VALUES (?, ?)
RETURNING id, user_id
`

type CreateSessionParams struct {
	ID     string
	UserID string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.ID, arg.UserID)
	var i Session
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, account) VALUES (?, ?)
RETURNING id, account
`

type CreateUserParams struct {
	ID      string
	Account string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Account)
	var i User
	err := row.Scan(&i.ID, &i.Account)
	return i, err
}

const getUserByAccount = `-- name: GetUserByAccount :one
SELECT id, account FROM users WHERE account = ?
`

func (q *Queries) GetUserByAccount(ctx context.Context, account string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAccount, account)
	var i User
	err := row.Scan(&i.ID, &i.Account)
	return i, err
}

const getUserBySessionID = `-- name: GetUserBySessionID :one
SELECT users.id, users.account
FROM users JOIN sessions ON sessions.user_id = users.id
WHERE sessions.id = ?
`

func (q *Queries) GetUserBySessionID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserBySessionID, id)
	var i User
	err := row.Scan(&i.ID, &i.Account)
	return i, err
}

const listMessagesAfterID = `-- name: ListMessagesAfterID :many
SELECT messages.id, messages.message, messages.created_at, users.account
FROM messages JOIN users ON messages.user_id = users.id
WHERE messages.id > ?
ORDER BY messages.id ASC LIMIT ?
`

type ListMessagesAfterIDParams struct {
	ID    string
	Limit int64
}

type ListMessagesAfterIDRow struct {
	ID        string
	Message   string
	CreatedAt time.Time
	Account   string
}

func (q *Queries) ListMessagesAfterID(ctx context.Context, arg ListMessagesAfterIDParams) ([]ListMessagesAfterIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listMessagesAfterID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMessagesAfterIDRow
	for rows.Next() {
		var i ListMessagesAfterIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.CreatedAt,
			&i.Account,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMessagesBeforeID = `-- name: ListMessagesBeforeID :many
SELECT messages.id, messages.message, messages.created_at, users.account
FROM messages JOIN users ON messages.user_id = users.id
WHERE messages.id < ?
ORDER BY messages.id DESC LIMIT ?
`

type ListMessagesBeforeIDParams struct {
	ID    string
	Limit int64
}

type ListMessagesBeforeIDRow struct {
	ID        string
	Message   string
	CreatedAt time.Time
	Account   string
}

func (q *Queries) ListMessagesBeforeID(ctx context.Context, arg ListMessagesBeforeIDParams) ([]ListMessagesBeforeIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listMessagesBeforeID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMessagesBeforeIDRow
	for rows.Next() {
		var i ListMessagesBeforeIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.CreatedAt,
			&i.Account,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNewestMessages = `-- name: ListNewestMessages :many
SELECT messages.id, messages.message, messages.created_at, users.account
FROM messages JOIN users ON messages.user_id = users.id
ORDER BY messages.id DESC LIMIT ?
`

type ListNewestMessagesRow struct {
	ID        string
	Message   string
	CreatedAt time.Time
	Account   string
}

func (q *Queries) ListNewestMessages(ctx context.Context, limit int64) ([]ListNewestMessagesRow, error) {
	rows, err := q.db.QueryContext(ctx, listNewestMessages, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListNewestMessagesRow
	for rows.Next() {
		var i ListNewestMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.CreatedAt,
			&i.Account,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOldestMessages = `-- name: ListOldestMessages :many
SELECT messages.id, messages.message, messages.created_at, users.account
FROM messages JOIN users ON messages.user_id = users.id
ORDER BY messages.id ASC LIMIT ?
`

type ListOldestMessagesRow struct {
	ID        string
	Message   string
	CreatedAt time.Time
	Account   string
}

func (q *Queries) ListOldestMessages(ctx context.Context, limit int64) ([]ListOldestMessagesRow, error) {
	rows, err := q.db.QueryContext(ctx, listOldestMessages, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListOldestMessagesRow
	for rows.Next() {
		var i ListOldestMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.CreatedAt,
			&i.Account,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
