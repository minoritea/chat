// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: queries.sql

package database

import (
	"context"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, user_id) VALUES (?, ?)
RETURNING id, user_id
`

type CreateSessionParams struct {
	ID     string
	UserID string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.ID, arg.UserID)
	var i Session
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, account_name, password_hash) VALUES (?, ?, ?)
RETURNING id, account_name, password_hash
`

type CreateUserParams struct {
	ID           string
	AccountName  string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.AccountName, arg.PasswordHash)
	var i User
	err := row.Scan(&i.ID, &i.AccountName, &i.PasswordHash)
	return i, err
}

const getUserByAccountName = `-- name: GetUserByAccountName :one
SELECT id, account_name, password_hash FROM users WHERE account_name = ?
`

func (q *Queries) GetUserByAccountName(ctx context.Context, accountName string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAccountName, accountName)
	var i User
	err := row.Scan(&i.ID, &i.AccountName, &i.PasswordHash)
	return i, err
}

const getUserBySessionID = `-- name: GetUserBySessionID :one
SELECT users.id, users.account_name, users.password_hash
FROM users JOIN sessions ON sessions.user_id = users.id
WHERE sessions.id = ?
`

func (q *Queries) GetUserBySessionID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserBySessionID, id)
	var i User
	err := row.Scan(&i.ID, &i.AccountName, &i.PasswordHash)
	return i, err
}
