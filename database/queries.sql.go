// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: queries.sql

package database

import (
	"context"
	"time"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (id, user_id, message, created_at) VALUES (?, ?, ?, ?)
RETURNING id, user_id, message, created_at
`

type CreateMessageParams struct {
	ID        string
	UserID    string
	Message   string
	CreatedAt time.Time
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.ID,
		arg.UserID,
		arg.Message,
		arg.CreatedAt,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, user_id) VALUES (?, ?)
RETURNING id, user_id
`

type CreateSessionParams struct {
	ID     string
	UserID string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.ID, arg.UserID)
	var i Session
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, account_name, password_hash) VALUES (?, ?, ?)
RETURNING id, account_name, password_hash
`

type CreateUserParams struct {
	ID           string
	AccountName  string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.AccountName, arg.PasswordHash)
	var i User
	err := row.Scan(&i.ID, &i.AccountName, &i.PasswordHash)
	return i, err
}

const getUserByAccountName = `-- name: GetUserByAccountName :one
SELECT id, account_name, password_hash FROM users WHERE account_name = ?
`

func (q *Queries) GetUserByAccountName(ctx context.Context, accountName string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAccountName, accountName)
	var i User
	err := row.Scan(&i.ID, &i.AccountName, &i.PasswordHash)
	return i, err
}

const getUserBySessionID = `-- name: GetUserBySessionID :one
SELECT users.id, users.account_name, users.password_hash
FROM users JOIN sessions ON sessions.user_id = users.id
WHERE sessions.id = ?
`

func (q *Queries) GetUserBySessionID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserBySessionID, id)
	var i User
	err := row.Scan(&i.ID, &i.AccountName, &i.PasswordHash)
	return i, err
}

const listMessages = `-- name: ListMessages :many
SELECT messages.id, messages.user_id, messages.message, messages.created_at, users.account_name
FROM messages JOIN users ON messages.user_id = users.id
ORDER BY created_at DESC LIMIT ?
`

type ListMessagesRow struct {
	ID          string
	UserID      string
	Message     string
	CreatedAt   time.Time
	AccountName string
}

func (q *Queries) ListMessages(ctx context.Context, limit int64) ([]ListMessagesRow, error) {
	rows, err := q.db.QueryContext(ctx, listMessages, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMessagesRow
	for rows.Next() {
		var i ListMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Message,
			&i.CreatedAt,
			&i.AccountName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
